
paths:
  /api/v1/auth/signup:
    post:
      summary: Register a new users.
      tags:
      - 🔐 User Authentication
      description: This Api endpoint allow users to register or signup to create their account .
      operationId: register
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: "userOne"
                email:
                  type: string
                  example: "one@gmail.com"
                password:
                  type: string
                  example: "Staging123$"
      responses:
        '201':
          description: User registered successfully.
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Length:
              schema:
                type: string
                example: "500"
            Content-Type:
              schema:
                type: string
                example: "application/json; charset=utf-8"
            Date:
              schema:
                type: string
                example: "Sun, 12 Dec 2021 06:25:37 GMT"
            ETag:
              schema:
                type: string
                example: W/"1f4-1q2mEjJRVbcL1EjonLxprbS85erA4qcFg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Rate-Limit:
              schema:
                type: string
                example: "500"
            Rate-Limit-Remaining:
              schema:
                type: string
                example: "495"
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User created successfully"
                  data:
                    type: object
                    properties:
                      userName:
                        type: string
                        exaple: "userOne"
                      email:
                        type: string
                        example: "one@gmail.com"
                      avatar:
                        type: string
                        example: "https://api.dicebear.com/6.x/pixel-art/svg?seed=userOne&background=%23000000&radius=50&colorful=1"
                      password:
                        type: string
                        example: "$2a$120$xzvagjt.G1mtcSViSCQYK.Fj0pFr5i6wRbEEIJD2hYRgZeuX/A3iv8Lu."
                      roles:
                        type: string
                        example: "User"
                      onboarded:
                        type: boolean
                        example: false
                      isEmailVerified:
                        type: bollean
                        example: false
                      refreshToken:
                        type: string
                        example: ''
                      _id:
                        type: string
                        example: "6576ab6110a2a0e5b125600c"
                      createdAt:
                        type: string
                        example: "2023-12-11T06:25:37.609Z"
                      updatedAt:
                        type: string
                        example: "2023-12-11T06:25:37.609Z"
                      __v:
                        type: string
                        example: 0

  /api/v1/auth/login:
    post:
      summary: Login a user
      tags:
      - 🔐 User Authentication
      description: The API endpoint allows users to log into the application securely and also returns an access token.When accessing this endpoint with valid login credentials, users will receive an access token in the response.Additionally, the API endpoint securely sets the access token within the browser/client httpOnly cookies for future authentication and authorization purposes.This functionality ensures a secure and efficient login process for users, providing them with an access token that can be used to authenticate subsequent API requests.By securely storing the access token in browser cookies, the endpoint enables automatic inclusion of the access token in future API requests, eliminating the need for users to manually manage and provide the token with each request..
      operationId: login
      requestBody:
        description: User login details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "one@gmail.com"
                password:
                  type: string
                  example: "Staging123$"
      responses:
        '200':
          description: User logged in successfully.
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Length:
              schema:
                type: string
                example: "500"
            Content-Type:
              schema:
                type: string
                example: "application/json; charset=utf-8"
            Date:
              schema:
                type: string
                example: "Sun, 12 Dec 2021 06:25:37 GMT"
            ETag:
              schema:
                type: string
                example: W/"1f4-1q2mEjJRVbcL1EjonLxprbS85erA4qcFg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Rate-Limit:
              schema:
                type: string
                example: "500"
            Rate-Limit-Remaining:
              schema:
                type: string
                example: "495"
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User logged in successfully"
                  data:
                    type: object
                    properties:
                      userName:
                        type: string
                        exaple: "userOne"
                      email:
                        type: string
                        example: "one@gmail.com"

  /api/v1/auth/logout:
    post:
      summary: Logout a user
      tags:
      - 🔐 User Authentication
      description: >
        The API endpoint is responsible for logging out users from the application and destroying the access token cookies stored on the client-side. When accessing this endpoint, it triggers the logout process, revoking the user's authentication and terminating their active session. Additionally, it ensures that any access token cookies associated with the user's session are removed from the client's browser, effectively logging them out from the application.
      operationId: logout
      responses:
        '200':
          description: User logged out successfully.
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Length:
              schema:
                type: string
                example: "500"
            Content-Type:
              schema:
                type: string
                example: "application/json; charset=utf-8"
            Date:
              schema:
                type: string
                example: "Sun, 12 Dec 2021 06:25:37 GMT"
            ETag:
              schema:
                type: string
                example: W/"1f4-1q2mEjJRVbcL1EjonLxprbS85erA4qcFg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Rate-Limit:
              schema:
                type: string
                example: "500"
            Rate-Limit-Remaining:
              schema:
                type: string
                example: "495"
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User logged out successfully"

  /api/v1/auth/refreshToken:
    get:
      summary: Refresh Token
      tags:
      - 🔐 User Authentication
      description: "The Refresh Access Token API is responsible for refreshing the access token when it expires.\n                #magic___^_^___line\nIt allows you to make a request to this endpoint with the refresh token, which has a lengthy expiry time, to obtain a new access token.\n                #magic___^_^___line\nSimultaneously, the API sets the new access token in a cookie for future authentication purposes while replacing the expired one.\n                #magic___^_^___line\nThis functionality ensures continuous access to protected resources by automatically renewing the access token <b>without requiring the user to reauthenticate manually</b>. \n                #magic___^_^___line\nBy utilizing the refresh token, the API securely refreshes the access token and updates it in the cookie, ensuring seamless and uninterrupted access to authorized endpoints.\n"
      operationId: refreshToken
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        required: false
        description: Bearer token for authorization. Please provide either this or the refresh token.
      - in: cookie
        name: refreshToken
        schema:
          type: string
        required: false
        description: Refresh token. Please provide either this or the Bearer token.
      responses:
        '200':
          description: refreshToken Generated successfully.
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Length:
              schema:
                type: string
                example: "500"
            Content-Type:
              schema:
                type: string
                example: "application/json; charset=utf-8"
            Date:
              schema:
                type: string
                example: "Sun, 12 Dec 2021 06:25:37 GMT"
            ETag:
              schema:
                type: string
                example: W/"1f4-1q2mEjJRVbcL1EjonLxprbS85erA4qcFg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Rate-Limit:
              schema:
                type: string
                example: "500"
            Rate-Limit-Remaining:
              schema:
                type: string
                example: "495"
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            Set-Cookie:
              schema:
                type: string
                example: 'refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NjQyNzIyMX0.TJpj8-2qU__GI_dKDdrHwQvUWCFSFXCfgOuV6MV05UI; Path=/; HttpOnly'
            X-Powered-By:
              schema:
                type: string
                example: Express
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true

  /api/v1/auth/verifyEmail/{token}:
    get:
      summary: Verify Email
      tags:
      - 🔐 User Authentication
      description: |
        The Verify Email API is responsible for verifying the user's email address by validating the email verification token.

        It allows users to verify their email address by making a request to this endpoint with the email verification token received in their email.

        Upon successful verification, the API updates the user's email verification status to true, confirming the validity of the email address.

        This functionality ensures that users can verify their email addresses securely and efficiently, enabling them to access the application's features and functionalities.
      operationId: verify-Email
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: false
        description: Email verification token.
      responses:
        '200':
          description: Successful verified email.
          content:
            text/html:
              schema:
                type: string
                example: "<html><body><h1>Success!</h1></body></html>"
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
          headers:
            Access-Control-Allow-Credentials:
              schema:
                type: string
                example: "true"
            Access-Control-Allow-Origin:
              schema:
                type: string
                example: "*"
            Connection:
              schema:
                type: string
                example: "keep-alive"
            Content-Length:
              schema:
                type: string
                example: "500"
            Content-Type:
              schema:
                type: string
                example: "application/json; charset=utf-8"
            Date:
              schema:
                type: string
                example: "Sun, 12 Dec 2021 06:25:37 GMT"
            ETag:
              schema:
                type: string
                example: W/"1f4-1q2mEjJRVbcL1EjonLxprbS85erA4qcFg"
            Keep-Alive:
              schema:
                type: string
                example: timeout=5
            Rate-Limit:
              schema:
                type: string
                example: "500"
            Rate-Limit-Remaining:
              schema:
                type: string
                example: "495"
            RateLimit-Reset:
              schema:
                type: string
                example: '772'
            Set-Cookie:
              schema:
                type: string
                example: 'refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NDc2ZTM0ZWJlMWNmYjljYzA4YmQ0NDYiLCJpYXQiOjE2ODU1NjMyMjEsImV4cCI6MTY4NjQyNzIyMX0.TJpj8-2qU__GI_dKDdrHwQvUWCFSFXCfgOuV6MV05UI; Path=/; HttpOnly'
            X-Powered-By:
              schema:
                type: string
                example: Express

  /api/v1/auth/resendEmailVerification:
    get:
      summary: Resend Email Verification
      tags:
      - 🔐 User Authentication
      description: |
        The Resend Email Verification API is responsible for resending the email verification link to the user's email address.

        It allows users to request a new email verification link by making a request to this endpoint.

        Upon successful operation, the API sends an email to the user's email address with the new verification link.

        This functionality ensures that users can request a new email verification link in case the previous one expired or was not received.
      operationId: resendEmailVerification
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Email sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email sent successfully"

  /api/v1/auth/onboarding:
    post:
      summary: User Onboarding
      tags:
      - 🔐 User Authentication
      description: |
        The User Onboarding API is responsible for updating user details during the onboarding process.

        It allows users to update their details by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the user's details and sets the `isOnboarded` status to true.

        This functionality ensures that users can complete their onboarding process efficiently.
      operationId: onboarding
      security:
      - bearerAuth: []
      requestBody:
        description: User details for onboarding
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                file:
                  type: string
                  format: binary
                mobile:
                  type: string
                  example: "9876567210"
                address:
                  type: object
                  properties:
                    landmark:
                      type: string
                      example: "Near City Park"
                    street:
                      type: string
                      example: "123 Main St"
                    city:
                      type: string
                      example: "New York"
                    state:
                      type: string
                      example: "NY"
                    postalCode:
                      type: string
                      example: "10001"
                    country:
                      type: string
                      example: "USA"
                dob:
                  type: string
                  format: date
                  example: "1990-01-01"
                gender:
                  type: string
                  enum: ['Male', 'Female', 'Other']
                  example: "Male"
                AccountStatus:
                  type: string
                  enum: ['Active', 'Inactive']
                  example: "Active"
                securityQuestions:
                  type: object
                  properties:
                    question1:
                      type: string
                      example: "What is your pet's name?"
                    answer1:
                      type: string
                      example: "Fluffy"
      responses:
        '200':
          description: Onboarding Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Onboarding Successful"

  /api/v1/auth/editAccount:
    put:
      summary: Edit User Account
      tags:
      - 🔐 User Authentication
      description: |
        The Edit User Account API is responsible for updating user details after the onboarding process.

        It allows users to update their details by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the user's details.

        This functionality ensures that users can update their account information efficiently.
      operationId: editAccount
      security:
      - bearerAuth: []
      requestBody:
        description: User details for account editing
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                file:
                  type: string
                  format: binary
                mobile:
                  type: string
                  example: "9876567210"
                address:
                  type: object
                  properties:
                    landmark:
                      type: string
                      example: "Near City Park"
                    street:
                      type: string
                      example: "123 Main St"
                    city:
                      type: string
                      example: "New York"
                    state:
                      type: string
                      example: "NY"
                    postalCode:
                      type: string
                      example: "10001"
                    country:
                      type: string
                      example: "USA"
                dob:
                  type: string
                  format: date
                  example: "1990-01-01"
                gender:
                  type: string
                  enum: ['Male', 'Female', 'Other']
                  example: "Male"
                AccountStatus:
                  type: string
                  enum: ['Active', 'Inactive']
                  example: "Active"
                securityQuestions:
                  type: object
                  properties:
                    question1:
                      type: string
                      example: "What is your pet's name?"
                    answer1:
                      type: string
                      example: "Fluffy"
      responses:
        '200':
          description: Account Update Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account Update Successful"

  /api/v1/auth/forgotPassword:
    post:
      summary: User Forgot Password
      tags:
      - 🔐 User Authentication
      description: |
        The User Forgot Password API is responsible for handling the forgot password process.

        It allows users to request a password reset by making a request to this endpoint with their email in the request body.

        Upon successful operation, the API generates a 6-digit OTP, stores it in the user's document for later verification, and sends an email to the user with the OTP.

        This functionality ensures that users can reset their password efficiently.
      operationId: forgotPassword
      requestBody:
        description: User's email for password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "one@gmail.com"
      responses:
        '200':
          description: Email sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Email sent successfully"
        '400':
          description: Bad request. The email is not provided or invalid.
        '404':
          description: User not found.

  /api/v1/auth/resetPassword:
    post:
      summary: User Reset Password
      tags:
      - 🔐 User Authentication
      description: |
        The User Reset Password API is responsible for handling the password reset process.

        It allows users to reset their password by making a request to this endpoint with their email and new password in the request body.

        Upon successful operation, the API updates the user's password in the database and returns a success message.

        This functionality ensures that users can reset their password efficiently.
      operationId: resetPassword
      requestBody:
        description: User's email and new password for password reset
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "one@gmail.com"
                password:
                  type: string
                  example: "Staging123%"
      responses:
        '200':
          description: Password reset successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Bad request. The email or password is not provided or invalid.

  /api/v1/auth/changePassword:
    post:
      summary: User Change Password
      tags:
      - 🔐 User Authentication
      description: |
        The User Change Password API is responsible for handling the password change process.

        It allows users to change their password by making a request to this endpoint with their old and new passwords in the request body.

        Upon successful operation, the API updates the user's password in the database and returns a success message.

        This functionality ensures that users can change their password efficiently.
      operationId: changePassword
      requestBody:
        description: User's old and new passwords for password change
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: "Staging123$"
                password:
                  type: string
                  example: "Staging123%"
      responses:
        '200':
          description: Password changed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          description: Bad request. The old password, new password is not provided or they are the same.
        '401':
          description: Unauthorized. The old password is invalid.
        '404':
          description: User not found.

  /api/v1/auth/verifyOtp:
    post:
      summary: User Verify OTP
      tags:
      - 🔐 User Authentication
      description: |
        The User Verify OTP API is responsible for handling the OTP verification process.

        It allows users to verify their OTP by making a request to this endpoint with their email and OTP in the request body.

        Upon successful operation, the API verifies the OTP, clears it from the user's document, and returns a success message.

        This functionality ensures that users can verify their OTP efficiently.
      operationId: verifyOtp
      requestBody:
        description: User's email and OTP for OTP verification
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "one@gmail.com"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "OTP verified successfully"
        '400':
          description: Bad request. The email or OTP is not provided.
        '401':
          description: Unauthorized. The OTP is invalid.
        '404':
          description: User not found.

  /api/v1/auth/changeAccountStatus:
    post:
      summary: User Change Account Status
      tags:
      - 🔐 User Authentication
      description: |
        The User Change Account Status API is responsible for handling the account status change process.

        It allows users to change their account status by making a request to this endpoint with the new status in the request body.

        Upon successful operation, the API updates the user's account status in the database and returns a success message.

        This functionality ensures that users can change their account status efficiently.
      operationId: changeAccountStatus
      requestBody:
        description: User's new account status
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "Active"
      responses:
        '200':
          description: Account status changed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Account status changed successfully"
        '400':
          description: Bad request. The status is not provided.
        '404':
          description: User not found.

  /api/v1/auth/getCurrentUser:
    get:
      summary: Get Current User
      tags:
      - 🔐 User Authentication
      description: |
        The Get Current User API is responsible for retrieving the details of the currently authenticated user.

        It allows users to get their details by making a request to this endpoint with the JWT token in the Authorization header or in the cookies.

        Upon successful operation, the API returns the user's details.

        This functionality ensures that users can retrieve their details efficiently.
      operationId: getCurrentUser
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        required: true
        description: JWT token for authentication
      - in: cookie
        name: accessToken
        schema:
          type: string
        required: false
        description: JWT token for authentication
      responses:
        '200':
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User details"
        '401':
          description: Unauthorized access. The JWT token is not provided or invalid.
        '404':
          description: User not found.



  # driver process starts here
  /api/v1/driver/preferedLocation:
    post:
      summary: Driver Preferred Place
      tags:
      - 🚗 Driver
      description: |
        The Driver Preferred Place API is responsible for updating the driver's preferred place.

        It allows drivers to update their preferred place by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's preferred place.

        This functionality ensures that drivers can update their preferred place efficiently.
      operationId: driverPreferredPlace
      security:
      - bearerAuth: []
      requestBody:
        description: Driver preferred place details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                preferredPlace:
                  type: string
                  example: "New York City"
                location:
                  type: array
                  items:
                    type: number
                  example: [40.7128, -74.0060]
      responses:
        '200':
          description: Preferred Place Update Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Preferred Place Update Successful"

  # driver chooses its vehicle type
  /api/v1/driver/driverVehicleType:
    post:
      summary: Driver Vehicle Type
      tags:
      - 🚗 Driver
      description: |
        The Driver Vehicle Type API is responsible for updating the driver's vehicle type.

        It allows drivers to update their vehicle type by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's vehicle type.

        This functionality ensures that drivers can update their vehicle type efficiently.
      operationId: driverVehicleType
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver vehicle type details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleType:
                  type: string
                  example: "Car"
      responses:
        '200':
          description: Vehicle Type Update Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Vehicle Type Update Successful"


  # driver document uploading start from here
  /api/v1/driver/document/vehiclePermit:
    post:
      summary: Upload Driver Vehicle Permit
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Vehicle Permit API is responsible for uploading the driver's Vehicle Permit.

        It allows drivers to upload their Vehicle Permit by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Vehicle Permit.

        This functionality ensures that drivers can upload their Vehicle Permit efficiently.
      operationId: uploadVehiclePermitDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Vehicle Permit
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "vehiclePermit"
                documentOwnerName:
                  type: string
                  example: "John Doe"
                documentNumber:
                  type: string
                  example: "123456789"
                documentExpiryDate:
                  type: string
                  format: date
                  example: "2025-12-31"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Vehicle Permit Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Vehicle Permit Uploaded Successful"
  /api/v1/driver/document/aadhaarcard:
    post:
      summary: Upload Driver Aadhaar Card
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Aadhaarcard API is responsible for uploading the driver's Aadhaarcard.

        It allows drivers to upload their Aadhaarcard by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Aadhaarcard.

        This functionality ensures that drivers can upload their Aadhaarcard efficiently.
      operationId: uploadAaadhaarcardDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Aadhaarcard
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "aadhaarcard"
                documentNumber:
                  type: string
                  example: "123456789"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Aadhaarcard Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Aadhaarcard Uploaded Successful"
  /api/v1/driver/document/pancard:
    post:
      summary: Upload Driver pancard
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Pancard API is responsible for uploading the driver's Pancard.

        It allows drivers to upload their Pancard by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Pancard.

        This functionality ensures that drivers can upload their Pancard efficiently.
      operationId: uploadPancardDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Pancard
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "pancard"
                documentNumber:
                  type: string
                  example: "123456789"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Pancard Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Pancard Uploaded Successful"
  /api/v1/driver/document/drivingLicence:
    post:
      summary: Upload Driver Driving Licence
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver  Driving Licence API is responsible for uploading the driver's  Driving Licence.

        It allows drivers to upload their  Driving Licence by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's  Driving Licence.

        This functionality ensures that drivers can upload their  Driving Licence efficiently.
      operationId: uploadDrivingLicenceDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver  Driving Licence
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "drivingLicence"
                documentNumber:
                  type: string
                  example: "123456789"
                documentExpiryDate:
                  type: string
                  format: date
                  example: "2025-12-31"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Driving Licence Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: " Driving Licence Uploaded Successful"
  /api/v1/driver/document/vehicleRegistration:
    post:
      summary: Upload Driver Vehicle Registration
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Vehicle Registration API is responsible for uploading the driver's Vehicle Registration.

        It allows drivers to upload their Vehicle Registration by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Vehicle Registration.

        This functionality ensures that drivers can upload their Vehicle Registration efficiently.
      operationId: uploadvehicleRegistrationDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Vehicle Registration
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "vehicleRegistration"
                documentNumber:
                  type: string
                  example: "123456789"
                documentExpiryDate:
                  type: string
                  format: date
                  example: "2025-12-31"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Vehicle Registration Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Vehicle Registration Uploaded Successful"
  /api/v1/driver/document/insurance:
    post:
      summary: Upload Driver Insurance
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Insurance API is responsible for uploading the driver's Insurance.

        It allows drivers to upload their Insurance by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Insurance.

        This functionality ensures that drivers can upload their Insurance efficiently.
      operationId: uploadInsuranceDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Insurance
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "insurance"
                documentNumber:
                  type: string
                  example: "123456789"
                documentExpiryDate:
                  type: string
                  format: date
                  example: "2025-12-31"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Insurance Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Insurance Uploaded Successful"
  /api/v1/driver/document/driverPhoto:
    post:
      summary: Upload Driver Driver Photo
      tags:
      - 🚗 Driver
      description: |
        The Upload Driver Driver Photo API is responsible for uploading the driver's Driver Photo.

        It allows drivers to upload their Driver Photo by making a request to this endpoint with the required data in the request body.

        Upon successful operation, the API updates the driver's Driver Photo.

        This functionality ensures that drivers can upload their Driver Photo efficiently.
      operationId: uploadDriver PhotoDetails
      security:
      - bearerAuth: []
      parameters:
      - in: header
        name: Access-Medium
        schema:
          type: string
        required: true
        description: Custom header for specifying the access medium.
      requestBody:
        description: Driver Driver Photo
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documentType:
                  type: string
                  example: "driverPhoto"
                file:
                  type: string
                  format: binary
                  description: The image of the document.
      responses:
        '200':
          description: Driver Photo Uploaded Successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Driver Photo Uploaded Successful"

# create a valid driver after validation
  /api/v1/driver/createDriver:
    get:
      summary: Create a new driver
      tags:
        - 🚗 Driver
      description: This endpoint creates a new driver with the provided userId.
      operationId: createDriver
      responses:
        '200':
          description: Successfully created driver profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      driverDetail:
                        type: string
                        example: "663cbc32c9f5980d24aa385d"
                      documents:
                        type: object
                        properties:
                          aadhaarcard:
                            type: object
                            properties:
                              number:
                                type: string
                                example: "123456789"
                          pancard:
                            type: object
                            properties:
                              number:
                                type: string
                                example: "123456789"
                          drivingLicence:
                            type: object
                            properties:
                              number:
                                type: string
                                example: "123456789"
                              expiryDate:
                                type: string
                                format: date-time
                                example: "2025-12-31T00:00:00.000Z"
                          vehicleRegistration:
                            type: object
                            properties:
                              number:
                                type: string
                                example: "123456789"
                              expiryDate:
                                type: string
                                format: date-time
                                example: "2025-12-31T00:00:00.000Z"
                          insurance:
                            type: object
                            properties:
                              number:
                                type: string
                                example: "123456789"
                              expiryDate:
                                type: string
                                format: date-time
                                example: "2025-12-31T00:00:00.000Z"
                          driverPhoto:
                            type: object
                            properties:
                              _id:
                                type: string
                                example: "664075ea570987f4fc85546e"
                          vehiclePermit:
                            type: object
                            properties:
                              ownerName:
                                type: string
                                example: "John Doe"
                              number:
                                type: string
                                example: "123456789"
                              expiryDate:
                                type: string
                                format: date-time
                                example: "2025-12-31T00:00:00.000Z"
                      vehicleType:
                        type: string
                        example: "Car"
                      averageRating:
                        type: number
                        example: 0
                      totalRatings:
                        type: number
                        example: 0
                      drivingHistory:
                        type: object
                        properties:
                          trafficViolations:
                            type: array
                            items:
                              type: string
                            example: []
                      availability:
                        type: boolean
                        example: false
                      onlineStatus:
                        type: boolean
                        example: false
                      complaints:
                        type: array
                        items:
                          type: string
                        example: []
                      tripHistory:
                        type: array
                        items:
                          type: string
                        example: []
                      lastKnownLocation:
                        type: object
                        properties:
                          location:
                            type: object
                            properties:
                              coordinates:
                                type: array
                                items:
                                  type: number
                                example: []
                      preferredWorkingArea:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "New York City"
                          location:
                            type: object
                            properties:
                              type:
                                type: string
                                example: "Point"
                              coordinates:
                                type: array
                                items:
                                  type: number
                                example: [40.7128, -74.006]
                      stage:
                        type: string
                        example: "driverPhoto"
                      _id:
                        type: string
                        example: "6640794026e21fa24f301037"
                      createdAt:
                        type: string
                        format: date-time
                        example: "2024-05-12T08:09:36.819Z"
                      updatedAt:
                        type: string
                        format: date-time
                        example: "2024-05-12T08:09:36.819Z"
                      __v:
                        type: number
                        example: 0
                  message:
                    type: string
                    example: "Successfully created driver profile"
                  success:
                    type: boolean
                    example: true


# Rides docs start here
/api/v1/finder/getAfterLocation:
  post:
    tags:
      - "👨‍💼 Rides"
    summary: Calculate fare details for different vehicle types
    description: >-
      This endpoint calculates the fare details for different vehicle types
      based on the provided distance and travel time.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              distance:
                type: number
                description: The distance of the ride.
                example: 10.5
              travelTime:
                type: number
                description: The travel time of the ride.
                example: 30
    responses:
      '200':
        description: Successfully fetched fare details
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      vehicleType:
                        type: string
                        example: "CAR"
                      totalFare:
                        type: number
                        example: 150.00
                      away:
                        type: number
                        example: 5
                message:
                  type: string
                  example: Successfully fetched fare details
                success:
                  type: boolean
                  example: true

# book a ride with us
/api/v1/finder/bookRide:
  post:
    tags:
      - "👨‍💼 Rides"
    summary: Book a ride
    description: >-
      This endpoint books a ride with the provided user, driver, pickup location, dropoff location, estimated fare, vehicle type, payment method, distance, and duration.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                type: string
                description: The ID of the user booking the ride.
                example: "123abc"
              driver:
                type: string
                description: The ID of the driver for the ride.
                example: "456def"
              pickupLocation:
                type: string
                description: The pickup location for the ride.
                example: "Location A"
              dropoffLocation:
                type: string
                description: The dropoff location for the ride.
                example: "Location B"
              estimatedFare:
                type: number
                description: The estimated fare for the ride.
                example: 15.00
              vehicleType:
                type: string
                description: The type of vehicle for the ride.
                example: "Car"
              paymentMethod:
                type: string
                description: The payment method for the ride.
                example: "credit_card"
              distance:
                type: number
                description: The distance of the ride.
                example: 10.5
              duration:
                type: number
                description: The duration of the ride.
                example: 30
    responses:
      '200':
        description: Successfully booked ride
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "789ghi"
                    user:
                      type: string
                      example: "123abc"
                    driver:
                      type: string
                      example: "456def"
                    pickupLocation:
                      type: string
                      example: "Location A"
                    dropoffLocation:
                      type: string
                      example: "Location B"
                    rideStatus:
                      type: string
                      example: "requested"
                    estimatedFare:
                      type: number
                      example: 15.00
                    vehicleType:
                      type: string
                      example: "Car"
                    paymentMethod:
                      type: string
                      example: "credit_card"
                    distance:
                      type: number
                      example: 10.5
                    duration:
                      type: number
                      example: 30
                    totalFare:
                      type: number
                      example: 17.70
                message:
                  type: string
                  example: "Successfully ride booked"
                success:
                  type: boolean
                  example: true

# get all types of activities
/api/v1/finder/getRides:
  get:
    tags:
      - "👨‍💼 Rides"
    summary: Get rides for a user
    description: >-
      This endpoint fetches rides for the current user. If rideStatus is provided in the query parameters, it fetches rides with the matching rideStatus. If rideStatus is not provided, it fetches all rides for the user.
    parameters:
      - in: query
        name: rideStatus
        schema:
          type: string
        description: The status of the ride to fetch.
        example: "requested"
    responses:
      '200':
        description: Successfully fetched rides
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "789ghi"
                      user:
                        type: string
                        example: "123abc"
                      driver:
                        type: string
                        example: "456def"
                      pickupLocation:
                        type: string
                        example: "Location A"
                      dropoffLocation:
                        type: string
                        example: "Location B"
                      rideStatus:
                        type: string
                        example: "requested"
                      estimatedFare:
                        type: number
                        example: 15.00
                      vehicleType:
                        type: string
                        example: "Car"
                      paymentMethod:
                        type: string
                        example: "credit_card"
                      distance:
                        type: number
                        example: 10.5
                      duration:
                        type: number
                        example: 30
                      totalFare:
                        type: number
                        example: 17.70
                message:
                  type: string
                  example: "Successfully fetched rides"
                success:
                  type: boolean
                  example: true

/api/v1/finder/cancelRide:
  put:
    tags:
      - "👨‍💼 Rides"
    summary: Cancel a ride
    description: >-
      This endpoint cancels a ride with the provided rideId. The rideId is provided in the query parameters. The rideStatus is set to "cancelled" and the cancelledBy field is set to the current user's ID.
    parameters:
      - in: query
        name: rideId
        schema:
          type: string
        description: The ID of the ride to cancel.
        example: "789ghi"
    responses:
      '200':
        description: Successfully cancelled ride
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    _id:
                      type: string
                      example: "789ghi"
                    user:
                      type: string
                      example: "123abc"
                    driver:
                      type: string
                      example: "456def"
                    pickupLocation:
                      type: string
                      example: "Location A"
                    dropoffLocation:
                      type: string
                      example: "Location B"
                    rideStatus:
                      type: string
                      example: "cancelled"
                    cancelledBy:
                      type: string
                      example: "123abc"
                    estimatedFare:
                      type: number
                      example: 15.00
                    vehicleType:
                      type: string
                      example: "Car"
                    paymentMethod:
                      type: string
                      example: "credit_card"
                    distance:
                      type: number
                      example: 10.5
                    duration:
                      type: number
                      example: 30
                    totalFare:
                      type: number
                      example: 17.70
                message:
                  type: string
                  example: "Successfully cancelled ride"
                success:
                  type: boolean
                  example: true



# Transactions Apis
/api/v1/payments/checkout:
  post:
    tags:
      - "💰 Payments"
    summary: Create a new order
    description: >-
      This endpoint creates a new order with the provided amount. The amount is provided in the request body. The order is created and the order details are returned.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              amount:
                type: number
                description: The amount to be paid.
                example: 100.00
    responses:
      '200':
        description: Order created successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "order_9A33XWu170gUtm"
                    entity:
                      type: string
                      example: "order"
                    amount:
                      type: number
                      example: 5000
                    currency:
                      type: string
                      example: "USD"
                    status:
                      type: string
                      example: "created"
                message:
                  type: string
                  example: "Order created successfully"
                success:
                  type: boolean
                  example: true

/api/v1/payments/getKey:
  get:
    tags:
      - "💰 Payments"
    summary: Send API Key
    description: >-
      This endpoint sends the Razorpay API key to the client.
    responses:
      '200':
        description: API Key sent successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  example: "rzp_test_1DP5mmOlF5G5ag"

/api/v1/payments/verifyPayment:
  post:
    tags:
      - "💰 Payments"
    summary: Verify a payment
    description: >-
      This endpoint verifies a payment using the RazorpayOrderId, RazorpayPaymentId, and RazorpaySignature provided in the request body.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              RazorpayOrderId:
                type: string
                description: The Razorpay Order ID.
                example: "order_9A33XWu170gUtm"
              RazorpayPaymentId:
                type: string
                description: The Razorpay Payment ID.
                example: "pay_8fHJJKlqFQ6Bqv"
              RazorpaySignature:
                type: string
                description: The Razorpay Signature.
                example: "50e94a5a5d8fd395d8b06b5db128a6a21a182d27f7b4a52d8c7f6f21f7b2b50c"
    responses:
      '200':
        description: Payment verified successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Payment verified"
                success:
                  type: boolean
                  example: true